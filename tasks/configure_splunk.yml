---
- name: Write cert files
  copy: 
    content: "{{cert.content}}"
    dest: "{{splunk_home}}/{{cert.name}}"
    owner: "{{ splunk_user }}"
    group: "{{ splunk_group }}" 
  with_items: "{{ splunk_certs }}"
  no_log: "{{ censor_secrets }}"
  loop_control:
    loop_var: cert
  when: splunk_certs is defined

- name: setup launch conf
  template: 
    src: splunk_home/etc/splunk-launch.conf.j2
    dest: "{{ splunk_home }}/etc/system/splunk-launch.conf"
    owner: "{{ splunk_user }}"
    group: "{{ splunk_group }}" 
    mode: 600
  notify:
    - restart splunk

- name: setup admin passwords for running commands
  set_fact:
    splunk_password: "{{ splunk_users.admin.password|d('changeme') }}"
  no_log: "{{ censor_secrets }}"
  when: "'admin' in splunk_users"

- name: setup {{ item }}.conf 
  template: 
    src: splunk_home/etc/system/local/{{ item }}.conf.j2
    dest: "{{ splunk_home }}/etc/system/local/{{ item }}.conf"
    owner: "{{ splunk_user }}"
    group: "{{ splunk_group }}" 
    mode: 600
  with_items:
    - web
    - transforms
    - server
    - limits
    - authorize
    - inputs
    - outputs
    - indexes
    - props
    - fields
    - db_connections
    - identities
  notify:
    - restart splunk

- name: set license master
  command: "{{ splunk_home}}/bin/splunk edit licenser-localslave -master_uri '{{ splunk_license_server }}' -auth admin:'{{splunk_password}}'" 
  no_log: "{{ censor_secrets }}"
  when: splunk_license_server|d('') != ''

- name: create user {{user.key}}
  command: >
    {{ splunk_home}}/bin/splunk add user {{user.key}} 
    -password {{ user.value.password|d('changeme') }} 
    -role user 
    -auth admin:'{{splunk_password}}'
  ignore_errors: true
  no_log: "{{ censor_secrets }}"
  when: user.key != 'admin'
  with_dict: "{{ splunk_users }}"
  loop_control:
    loop_var: user

- name: update admin user
  command: >
    {{ splunk_home}}/bin/splunk edit user admin
    {% if splunk_users.admin.tz is defined -%} -tz {{ splunk_users.admin.tz }} {%- endif %}
    -auth admin:'{{splunk_password}}'
  #no_log: "{{ censor_secrets }}"
  when: "'admin' in splunk_users and (splunk_users.admin.tz is defined)"

- name: update user {{user.key}}
  command: >
    {{ splunk_home}}/bin/splunk edit user {{user.key}} 
    {% if user.value.password is defined -%} -password {{ user.value.password }} {%- endif %}
    {% if user.value.role is defined -%} -role {{ user.value.role }} {%- endif %}
    {% if user.value.tz is defined -%} -tz {{ user.value.tz }} {%- endif %}
    -auth admin:'{{splunk_password}}'
  no_log: "{{ censor_secrets }}"
  when: user.key != 'admin'
  with_dict: "{{ splunk_users }}"
  loop_control:
    loop_var: user

- name: install app {{app.name}}
  include_tasks: install_splunk_app.yml
  become: true
  with_items: "{{ splunk_apps }}"
  loop_control:
    loop_var: app

